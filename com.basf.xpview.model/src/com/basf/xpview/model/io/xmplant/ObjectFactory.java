//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.03.11 at 08:37:52 PM CET 
//


package com.basf.xpview.model.io.xmplant;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.namespace.QName;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the com.basf.xmplant.model.xml package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _BsplineSurface_QNAME = new QName("", "BsplineSurface");
    private final static QName _MaximumAmbientTemperature_QNAME = new QName("", "MaximumAmbientTemperature");
    private final static QName _EndAngle_QNAME = new QName("", "EndAngle");
    private final static QName _MaximumOperatingTemperature_QNAME = new QName("", "MaximumOperatingTemperature");
    private final static QName _NormalOperatingPressure_QNAME = new QName("", "NormalOperatingPressure");
    private final static QName _StartDiameter_QNAME = new QName("", "StartDiameter");
    private final static QName _SurfaceTreatment_QNAME = new QName("", "SurfaceTreatment");
    private final static QName _MinimumRelativeHumidity_QNAME = new QName("", "MinimumRelativeHumidity");
    private final static QName _EndPreparation_QNAME = new QName("", "EndPreparation");
    private final static QName _Weight_QNAME = new QName("", "Weight");
    private final static QName _NominalDiameter_QNAME = new QName("", "NominalDiameter");
    private final static QName _OutsideDiameter_QNAME = new QName("", "OutsideDiameter");
    private final static QName _Surface_QNAME = new QName("", "Surface");
    private final static QName _InstrumentPanel_QNAME = new QName("", "InstrumentPanel");
    private final static QName _FabricationCategory_QNAME = new QName("", "FabricationCategory");
    private final static QName _ScheduleThickness_QNAME = new QName("", "ScheduleThickness");
    private final static QName _Tracing_QNAME = new QName("", "Tracing");
    private final static QName _AverageBarometricPressure_QNAME = new QName("", "AverageBarometricPressure");
    private final static QName _Circle_QNAME = new QName("", "Circle");
    private final static QName _Standard_QNAME = new QName("", "Standard");
    private final static QName _SmallDiameter_QNAME = new QName("", "SmallDiameter");
    private final static QName _PolyLine_QNAME = new QName("", "PolyLine");
    private final static QName _TestPressure_QNAME = new QName("", "TestPressure");
    private final static QName _Height_QNAME = new QName("", "Height");
    private final static QName _TrimmedCurve_QNAME = new QName("", "TrimmedCurve");
    private final static QName _NormalOperatingTemperature_QNAME = new QName("", "NormalOperatingTemperature");
    private final static QName _MaterialDescription_QNAME = new QName("", "MaterialDescription");
    private final static QName _InsideDiameter_QNAME = new QName("", "InsideDiameter");
    private final static QName _BsplineCurve_QNAME = new QName("", "BsplineCurve");
    private final static QName _Curve_QNAME = new QName("", "Curve");
    private final static QName _Rating_QNAME = new QName("", "Rating");
    private final static QName _WeldType_QNAME = new QName("", "WeldType");
    private final static QName _EndDiameter_QNAME = new QName("", "EndDiameter");
    private final static QName _MaximumDesignPressure_QNAME = new QName("", "MaximumDesignPressure");
    private final static QName _MinimumOperatingTemperature_QNAME = new QName("", "MinimumOperatingTemperature");
    private final static QName _CompositeCurve_QNAME = new QName("", "CompositeCurve");
    private final static QName _MinimumAmbientTemperature_QNAME = new QName("", "MinimumAmbientTemperature");
    private final static QName _CurveBoundedSurface_QNAME = new QName("", "CurveBoundedSurface");
    private final static QName _BranchDiameter_QNAME = new QName("", "BranchDiameter");
    private final static QName _Association_QNAME = new QName("", "Association");
    private final static QName _Type_QNAME = new QName("", "Type");
    private final static QName _Material_QNAME = new QName("", "Material");
    private final static QName _MaximumRelativeHumidity_QNAME = new QName("", "MaximumRelativeHumidity");
    private final static QName _ConnectionType_QNAME = new QName("", "ConnectionType");
    private final static QName _Thickness_QNAME = new QName("", "Thickness");
    private final static QName _Discipline_QNAME = new QName("", "Discipline");
    private final static QName _MinimumDesignTemperature_QNAME = new QName("", "MinimumDesignTemperature");
    private final static QName _GasketGap_QNAME = new QName("", "GasketGap");
    private final static QName _Grade_QNAME = new QName("", "Grade");
    private final static QName _SweepAngle_QNAME = new QName("", "SweepAngle");
    private final static QName _FluidType_QNAME = new QName("", "FluidType");
    private final static QName _StartAngle_QNAME = new QName("", "StartAngle");
    private final static QName _LargeDiameter_QNAME = new QName("", "LargeDiameter");
    private final static QName _Ellipse_QNAME = new QName("", "Ellipse");
    private final static QName _MinimumDesignPressure_QNAME = new QName("", "MinimumDesignPressure");
    private final static QName _WallThickness_QNAME = new QName("", "WallThickness");
    private final static QName _MaximumDesignTemperature_QNAME = new QName("", "MaximumDesignTemperature");
    private final static QName _Description_QNAME = new QName("", "Description");
    private final static QName _StubDiameter_QNAME = new QName("", "StubDiameter");
    private final static QName _BendAngle_QNAME = new QName("", "BendAngle");
    private final static QName _PlantItem_QNAME = new QName("", "PlantItem");
    private final static QName _PersistentID_QNAME = new QName("", "PersistentID");
    private final static QName _CenterLine_QNAME = new QName("", "CenterLine");
    private final static QName _Lining_QNAME = new QName("", "Lining");
    private final static QName _PipingComponent_QNAME = new QName("", "PipingComponent");
    private final static QName _Shape_QNAME = new QName("", "Shape");
    private final static QName _NormalDesignPressure_QNAME = new QName("", "NormalDesignPressure");
    private final static QName _Radius_QNAME = new QName("", "Radius");
    private final static QName _NormalDesignTemperature_QNAME = new QName("", "NormalDesignTemperature");
    private final static QName _MaximumOperatingPressure_QNAME = new QName("", "MaximumOperatingPressure");
    private final static QName _Insulation_QNAME = new QName("", "Insulation");
    private final static QName _Length_QNAME = new QName("", "Length");
    private final static QName _Family_QNAME = new QName("", "Family");
    private final static QName _MinimumOperatingPressure_QNAME = new QName("", "MinimumOperatingPressure");
    private final static QName _Line_QNAME = new QName("", "Line");
    private final static QName _JunctionBox_QNAME = new QName("", "JunctionBox");
    private final static QName _OperatorType_QNAME = new QName("", "OperatorType");
    private final static QName _PlantItemManufacturer_QNAME = new QName("", "Manufacturer");
    private final static QName _PlantItemSupplier_QNAME = new QName("", "Supplier");
    private final static QName _PlantItemModelNumber_QNAME = new QName("", "ModelNumber");
    private final static QName _BsplineSurfaceKnotMultiplicitiesU_QNAME = new QName("", "KnotMultiplicitiesU");
    private final static QName _BsplineSurfaceKnotMultiplicitiesV_QNAME = new QName("", "KnotMultiplicitiesV");
    private final static QName _BsplineSurfaceControlPointArray_QNAME = new QName("", "ControlPointArray");
    private final static QName _BsplineSurfaceWeights_QNAME = new QName("", "Weights");
    private final static QName _BsplineSurfaceKnotsU_QNAME = new QName("", "KnotsU");
    private final static QName _BsplineSurfaceKnotsV_QNAME = new QName("", "KnotsV");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: com.basf.xmplant.model.xml
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link PipeFlowArrow }
     * 
     */
    public PipeFlowArrow createPipeFlowArrow() {
        return new PipeFlowArrow();
    }

    /**
     * Create an instance of {@link AnnotationItem }
     * 
     */
    public AnnotationItem createAnnotationItem() {
        return new AnnotationItem();
    }

    /**
     * Create an instance of {@link Presentation }
     * 
     */
    public Presentation createPresentation() {
        return new Presentation();
    }

    /**
     * Create an instance of {@link Extent }
     * 
     */
    public Extent createExtent() {
        return new Extent();
    }

    /**
     * Create an instance of {@link Min }
     * 
     */
    public Min createMin() {
        return new Min();
    }

    /**
     * Create an instance of {@link Max }
     * 
     */
    public Max createMax() {
        return new Max();
    }

    /**
     * Create an instance of {@link PersistentID }
     * 
     */
    public PersistentID createPersistentID() {
        return new PersistentID();
    }

    /**
     * Create an instance of {@link Position }
     * 
     */
    public Position createPosition() {
        return new Position();
    }

    /**
     * Create an instance of {@link Location }
     * 
     */
    public Location createLocation() {
        return new Location();
    }

    /**
     * Create an instance of {@link Axis }
     * 
     */
    public Axis createAxis() {
        return new Axis();
    }

    /**
     * Create an instance of {@link Reference }
     * 
     */
    public Reference createReference() {
        return new Reference();
    }

    /**
     * Create an instance of {@link Scale }
     * 
     */
    public Scale createScale() {
        return new Scale();
    }

    /**
     * Create an instance of {@link Text }
     * 
     */
    public Text createText() {
        return new Text();
    }

    /**
     * Create an instance of {@link com.basf.xpview.model.io.xmplant.String }
     * 
     */
    public com.basf.xpview.model.io.xmplant.String createString() {
        return new com.basf.xpview.model.io.xmplant.String();
    }

    /**
     * Create an instance of {@link GenericAttributes }
     * 
     */
    public GenericAttributes createGenericAttributes() {
        return new GenericAttributes();
    }

    /**
     * Create an instance of {@link GenericAttribute }
     * 
     */
    public GenericAttribute createGenericAttribute() {
        return new GenericAttribute();
    }

    /**
     * Create an instance of {@link History }
     * 
     */
    public History createHistory() {
        return new History();
    }

    /**
     * Create an instance of {@link Transaction }
     * 
     */
    public Transaction createTransaction() {
        return new Transaction();
    }

    /**
     * Create an instance of {@link Association }
     * 
     */
    public Association createAssociation() {
        return new Association();
    }

    /**
     * Create an instance of {@link ConnectionPoints }
     * 
     */
    public ConnectionPoints createConnectionPoints() {
        return new ConnectionPoints();
    }

    /**
     * Create an instance of {@link Node }
     * 
     */
    public Node createNode() {
        return new Node();
    }

    /**
     * Create an instance of {@link DistanceDouble }
     * 
     */
    public DistanceDouble createDistanceDouble() {
        return new DistanceDouble();
    }

    /**
     * Create an instance of {@link DistanceString }
     * 
     */
    public DistanceString createDistanceString() {
        return new DistanceString();
    }

    /**
     * Create an instance of {@link PAxis }
     * 
     */
    public PAxis createPAxis() {
        return new PAxis();
    }

    /**
     * Create an instance of {@link WeightDouble }
     * 
     */
    public WeightDouble createWeightDouble() {
        return new WeightDouble();
    }

    /**
     * Create an instance of {@link JunctionBox }
     * 
     */
    public JunctionBox createJunctionBox() {
        return new JunctionBox();
    }

    /**
     * Create an instance of {@link PropertyBreak }
     * 
     */
    public PropertyBreak createPropertyBreak() {
        return new PropertyBreak();
    }

    /**
     * Create an instance of {@link DEPControlPoints }
     * 
     */
    public DEPControlPoints createDEPControlPoints() {
        return new DEPControlPoints();
    }

    /**
     * Create an instance of {@link Coordinate }
     * 
     */
    public Coordinate createCoordinate() {
        return new Coordinate();
    }

    /**
     * Create an instance of {@link Identifier }
     * 
     */
    public Identifier createIdentifier() {
        return new Identifier();
    }

    /**
     * Create an instance of {@link IdentifierElement }
     * 
     */
    public IdentifierElement createIdentifierElement() {
        return new IdentifierElement();
    }

    /**
     * Create an instance of {@link PressureDouble }
     * 
     */
    public PressureDouble createPressureDouble() {
        return new PressureDouble();
    }

    /**
     * Create an instance of {@link Equipment }
     * 
     */
    public Equipment createEquipment() {
        return new Equipment();
    }

    /**
     * Create an instance of {@link PlantItem }
     * 
     */
    public PlantItem createPlantItem() {
        return new PlantItem();
    }

    /**
     * Create an instance of {@link PConnectionPoints }
     * 
     */
    public PConnectionPoints createPConnectionPoints() {
        return new PConnectionPoints();
    }

    /**
     * Create an instance of {@link PNode }
     * 
     */
    public PNode createPNode() {
        return new PNode();
    }

    /**
     * Create an instance of {@link PPosition }
     * 
     */
    public PPosition createPPosition() {
        return new PPosition();
    }

    /**
     * Create an instance of {@link PLocation }
     * 
     */
    public PLocation createPLocation() {
        return new PLocation();
    }

    /**
     * Create an instance of {@link PReference }
     * 
     */
    public PReference createPReference() {
        return new PReference();
    }

    /**
     * Create an instance of {@link TemperatureDouble }
     * 
     */
    public TemperatureDouble createTemperatureDouble() {
        return new TemperatureDouble();
    }

    /**
     * Create an instance of {@link Nozzle }
     * 
     */
    public Nozzle createNozzle() {
        return new Nozzle();
    }

    /**
     * Create an instance of {@link NozzleType }
     * 
     */
    public NozzleType createNozzleType() {
        return new NozzleType();
    }

    /**
     * Create an instance of {@link Component }
     * 
     */
    public Component createComponent() {
        return new Component();
    }

    /**
     * Create an instance of {@link ShapeCatalogue }
     * 
     */
    public ShapeCatalogue createShapeCatalogue() {
        return new ShapeCatalogue();
    }

    /**
     * Create an instance of {@link PipingComponent }
     * 
     */
    public PipingComponent createPipingComponent() {
        return new PipingComponent();
    }

    /**
     * Create an instance of {@link ProcessInstrument }
     * 
     */
    public ProcessInstrument createProcessInstrument() {
        return new ProcessInstrument();
    }

    /**
     * Create an instance of {@link InstrumentComponent }
     * 
     */
    public InstrumentComponent createInstrumentComponent() {
        return new InstrumentComponent();
    }

    /**
     * Create an instance of {@link PipeConnectorSymbol }
     * 
     */
    public PipeConnectorSymbol createPipeConnectorSymbol() {
        return new PipeConnectorSymbol();
    }

    /**
     * Create an instance of {@link CrossPageConnection }
     * 
     */
    public CrossPageConnection createCrossPageConnection() {
        return new CrossPageConnection();
    }

    /**
     * Create an instance of {@link SignalConnectorSymbol }
     * 
     */
    public SignalConnectorSymbol createSignalConnectorSymbol() {
        return new SignalConnectorSymbol();
    }

    /**
     * Create an instance of {@link InsulationSymbol }
     * 
     */
    public InsulationSymbol createInsulationSymbol() {
        return new InsulationSymbol();
    }

    /**
     * Create an instance of {@link Label }
     * 
     */
    public Label createLabel() {
        return new Label();
    }

    /**
     * Create an instance of {@link PolyLine }
     * 
     */
    public PolyLine createPolyLine() {
        return new PolyLine();
    }

    /**
     * Create an instance of {@link BsplineCurve }
     * 
     */
    public BsplineCurve createBsplineCurve() {
        return new BsplineCurve();
    }

    /**
     * Create an instance of {@link Drawing }
     * 
     */
    public Drawing createDrawing() {
        return new Drawing();
    }

    /**
     * Create an instance of {@link DrawingBorder }
     * 
     */
    public DrawingBorder createDrawingBorder() {
        return new DrawingBorder();
    }

    /**
     * Create an instance of {@link ScopeBubble }
     * 
     */
    public ScopeBubble createScopeBubble() {
        return new ScopeBubble();
    }

    /**
     * Create an instance of {@link CurveBoundedSurface }
     * 
     */
    public CurveBoundedSurface createCurveBoundedSurface() {
        return new CurveBoundedSurface();
    }

    /**
     * Create an instance of {@link Vertices }
     * 
     */
    public Vertices createVertices() {
        return new Vertices();
    }

    /**
     * Create an instance of {@link DEPWeights }
     * 
     */
    public DEPWeights createDEPWeights() {
        return new DEPWeights();
    }

    /**
     * Create an instance of {@link PlantModel }
     * 
     */
    public PlantModel createPlantModel() {
        return new PlantModel();
    }

    /**
     * Create an instance of {@link PlantInformation }
     * 
     */
    public PlantInformation createPlantInformation() {
        return new PlantInformation();
    }

    /**
     * Create an instance of {@link UnitsOfMeasure }
     * 
     */
    public UnitsOfMeasure createUnitsOfMeasure() {
        return new UnitsOfMeasure();
    }

    /**
     * Create an instance of {@link PlantArea }
     * 
     */
    public PlantArea createPlantArea() {
        return new PlantArea();
    }

    /**
     * Create an instance of {@link InstrumentLoop }
     * 
     */
    public InstrumentLoop createInstrumentLoop() {
        return new InstrumentLoop();
    }

    /**
     * Create an instance of {@link SignalLine }
     * 
     */
    public SignalLine createSignalLine() {
        return new SignalLine();
    }

    /**
     * Create an instance of {@link Connection }
     * 
     */
    public Connection createConnection() {
        return new Connection();
    }

    /**
     * Create an instance of {@link CenterLine }
     * 
     */
    public CenterLine createCenterLine() {
        return new CenterLine();
    }

    /**
     * Create an instance of {@link PipingNetworkSystem }
     * 
     */
    public PipingNetworkSystem createPipingNetworkSystem() {
        return new PipingNetworkSystem();
    }

    /**
     * Create an instance of {@link PipingNetworkSegment }
     * 
     */
    public PipingNetworkSegment createPipingNetworkSegment() {
        return new PipingNetworkSegment();
    }

    /**
     * Create an instance of {@link InstrumentConnection }
     * 
     */
    public InstrumentConnection createInstrumentConnection() {
        return new InstrumentConnection();
    }

    /**
     * Create an instance of {@link AngleDouble }
     * 
     */
    public AngleDouble createAngleDouble() {
        return new AngleDouble();
    }

    /**
     * Create an instance of {@link Ellipse }
     * 
     */
    public Ellipse createEllipse() {
        return new Ellipse();
    }

    /**
     * Create an instance of {@link DEPControlPointArray }
     * 
     */
    public DEPControlPointArray createDEPControlPointArray() {
        return new DEPControlPointArray();
    }

    /**
     * Create an instance of {@link OuterBoundary }
     * 
     */
    public OuterBoundary createOuterBoundary() {
        return new OuterBoundary();
    }

    /**
     * Create an instance of {@link Pcurve }
     * 
     */
    public Pcurve createPcurve() {
        return new Pcurve();
    }

    /**
     * Create an instance of {@link ControlPointWeight }
     * 
     */
    public ControlPointWeight createControlPointWeight() {
        return new ControlPointWeight();
    }

    /**
     * Create an instance of {@link Line }
     * 
     */
    public Line createLine() {
        return new Line();
    }

    /**
     * Create an instance of {@link BsplineSurface }
     * 
     */
    public BsplineSurface createBsplineSurface() {
        return new BsplineSurface();
    }

    /**
     * Create an instance of {@link Parameters }
     * 
     */
    public Parameters createParameters() {
        return new Parameters();
    }

    /**
     * Create an instance of {@link Double }
     * 
     */
    public Double createDouble() {
        return new Double();
    }

    /**
     * Create an instance of {@link TerminalStrip }
     * 
     */
    public TerminalStrip createTerminalStrip() {
        return new TerminalStrip();
    }

    /**
     * Create an instance of {@link Terminal }
     * 
     */
    public Terminal createTerminal() {
        return new Terminal();
    }

    /**
     * Create an instance of {@link Circle }
     * 
     */
    public Circle createCircle() {
        return new Circle();
    }

    /**
     * Create an instance of {@link TrimmedCurve }
     * 
     */
    public TrimmedCurve createTrimmedCurve() {
        return new TrimmedCurve();
    }

    /**
     * Create an instance of {@link InnerBoundary }
     * 
     */
    public InnerBoundary createInnerBoundary() {
        return new InnerBoundary();
    }

    /**
     * Create an instance of {@link Associations }
     * 
     */
    public Associations createAssociations() {
        return new Associations();
    }

    /**
     * Create an instance of {@link CompositeCurve }
     * 
     */
    public CompositeCurve createCompositeCurve() {
        return new CompositeCurve();
    }

    /**
     * Create an instance of {@link Shape }
     * 
     */
    public Shape createShape() {
        return new Shape();
    }

    /**
     * Create an instance of {@link KnotMultiplicities }
     * 
     */
    public KnotMultiplicities createKnotMultiplicities() {
        return new KnotMultiplicities();
    }

    /**
     * Create an instance of {@link Weights }
     * 
     */
    public Weights createWeights() {
        return new Weights();
    }

    /**
     * Create an instance of {@link VolumeDouble }
     * 
     */
    public VolumeDouble createVolumeDouble() {
        return new VolumeDouble();
    }

    /**
     * Create an instance of {@link Knots }
     * 
     */
    public Knots createKnots() {
        return new Knots();
    }

    /**
     * Create an instance of {@link AreaDouble }
     * 
     */
    public AreaDouble createAreaDouble() {
        return new AreaDouble();
    }

    /**
     * Create an instance of {@link WeightsData }
     * 
     */
    public WeightsData createWeightsData() {
        return new WeightsData();
    }

    /**
     * Create an instance of {@link ControlPoints }
     * 
     */
    public ControlPoints createControlPoints() {
        return new ControlPoints();
    }

    /**
     * Create an instance of {@link PCoordinate }
     * 
     */
    public PCoordinate createPCoordinate() {
        return new PCoordinate();
    }

    /**
     * Create an instance of {@link ControlPointArray }
     * 
     */
    public ControlPointArray createControlPointArray() {
        return new ControlPointArray();
    }

    /**
     * Create an instance of {@link Integer }
     * 
     */
    public Integer createInteger() {
        return new Integer();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link BsplineSurface }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "BsplineSurface", substitutionHeadNamespace = "", substitutionHeadName = "Surface")
    public JAXBElement<BsplineSurface> createBsplineSurface(BsplineSurface value) {
        return new JAXBElement<BsplineSurface>(_BsplineSurface_QNAME, BsplineSurface.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TemperatureDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "MaximumAmbientTemperature")
    public JAXBElement<TemperatureDouble> createMaximumAmbientTemperature(TemperatureDouble value) {
        return new JAXBElement<TemperatureDouble>(_MaximumAmbientTemperature_QNAME, TemperatureDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AngleDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "EndAngle")
    public JAXBElement<AngleDouble> createEndAngle(AngleDouble value) {
        return new JAXBElement<AngleDouble>(_EndAngle_QNAME, AngleDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TemperatureDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "MaximumOperatingTemperature")
    public JAXBElement<TemperatureDouble> createMaximumOperatingTemperature(TemperatureDouble value) {
        return new JAXBElement<TemperatureDouble>(_MaximumOperatingTemperature_QNAME, TemperatureDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PressureDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "NormalOperatingPressure")
    public JAXBElement<PressureDouble> createNormalOperatingPressure(PressureDouble value) {
        return new JAXBElement<PressureDouble>(_NormalOperatingPressure_QNAME, PressureDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DistanceDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "StartDiameter")
    public JAXBElement<DistanceDouble> createStartDiameter(DistanceDouble value) {
        return new JAXBElement<DistanceDouble>(_StartDiameter_QNAME, DistanceDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link com.basf.xpview.model.io.xmplant.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "SurfaceTreatment")
    public JAXBElement<com.basf.xpview.model.io.xmplant.String> createSurfaceTreatment(com.basf.xpview.model.io.xmplant.String value) {
        return new JAXBElement<com.basf.xpview.model.io.xmplant.String>(_SurfaceTreatment_QNAME, com.basf.xpview.model.io.xmplant.String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Double }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "MinimumRelativeHumidity")
    public JAXBElement<Double> createMinimumRelativeHumidity(Double value) {
        return new JAXBElement<Double>(_MinimumRelativeHumidity_QNAME, Double.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link com.basf.xpview.model.io.xmplant.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "EndPreparation")
    public JAXBElement<com.basf.xpview.model.io.xmplant.String> createEndPreparation(com.basf.xpview.model.io.xmplant.String value) {
        return new JAXBElement<com.basf.xpview.model.io.xmplant.String>(_EndPreparation_QNAME, com.basf.xpview.model.io.xmplant.String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link WeightDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Weight")
    public JAXBElement<WeightDouble> createWeight(WeightDouble value) {
        return new JAXBElement<WeightDouble>(_Weight_QNAME, WeightDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DistanceDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "NominalDiameter")
    public JAXBElement<DistanceDouble> createNominalDiameter(DistanceDouble value) {
        return new JAXBElement<DistanceDouble>(_NominalDiameter_QNAME, DistanceDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DistanceDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "OutsideDiameter")
    public JAXBElement<DistanceDouble> createOutsideDiameter(DistanceDouble value) {
        return new JAXBElement<DistanceDouble>(_OutsideDiameter_QNAME, DistanceDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Surface")
    public JAXBElement<Object> createSurface(Object value) {
        return new JAXBElement<Object>(_Surface_QNAME, Object.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link JunctionBox }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "InstrumentPanel")
    public JAXBElement<JunctionBox> createInstrumentPanel(JunctionBox value) {
        return new JAXBElement<JunctionBox>(_InstrumentPanel_QNAME, JunctionBox.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link com.basf.xpview.model.io.xmplant.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "FabricationCategory")
    public JAXBElement<com.basf.xpview.model.io.xmplant.String> createFabricationCategory(com.basf.xpview.model.io.xmplant.String value) {
        return new JAXBElement<com.basf.xpview.model.io.xmplant.String>(_FabricationCategory_QNAME, com.basf.xpview.model.io.xmplant.String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DistanceString }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "ScheduleThickness")
    public JAXBElement<DistanceString> createScheduleThickness(DistanceString value) {
        return new JAXBElement<DistanceString>(_ScheduleThickness_QNAME, DistanceString.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link com.basf.xpview.model.io.xmplant.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Tracing")
    public JAXBElement<com.basf.xpview.model.io.xmplant.String> createTracing(com.basf.xpview.model.io.xmplant.String value) {
        return new JAXBElement<com.basf.xpview.model.io.xmplant.String>(_Tracing_QNAME, com.basf.xpview.model.io.xmplant.String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PressureDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "AverageBarometricPressure")
    public JAXBElement<PressureDouble> createAverageBarometricPressure(PressureDouble value) {
        return new JAXBElement<PressureDouble>(_AverageBarometricPressure_QNAME, PressureDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Circle }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Circle", substitutionHeadNamespace = "", substitutionHeadName = "Curve")
    public JAXBElement<Circle> createCircle(Circle value) {
        return new JAXBElement<Circle>(_Circle_QNAME, Circle.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link com.basf.xpview.model.io.xmplant.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Standard")
    public JAXBElement<com.basf.xpview.model.io.xmplant.String> createStandard(com.basf.xpview.model.io.xmplant.String value) {
        return new JAXBElement<com.basf.xpview.model.io.xmplant.String>(_Standard_QNAME, com.basf.xpview.model.io.xmplant.String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DistanceDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "SmallDiameter")
    public JAXBElement<DistanceDouble> createSmallDiameter(DistanceDouble value) {
        return new JAXBElement<DistanceDouble>(_SmallDiameter_QNAME, DistanceDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PolyLine }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "PolyLine", substitutionHeadNamespace = "", substitutionHeadName = "Curve")
    public JAXBElement<PolyLine> createPolyLine(PolyLine value) {
        return new JAXBElement<PolyLine>(_PolyLine_QNAME, PolyLine.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PressureDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "TestPressure")
    public JAXBElement<PressureDouble> createTestPressure(PressureDouble value) {
        return new JAXBElement<PressureDouble>(_TestPressure_QNAME, PressureDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DistanceDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Height")
    public JAXBElement<DistanceDouble> createHeight(DistanceDouble value) {
        return new JAXBElement<DistanceDouble>(_Height_QNAME, DistanceDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TrimmedCurve }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "TrimmedCurve", substitutionHeadNamespace = "", substitutionHeadName = "Curve")
    public JAXBElement<TrimmedCurve> createTrimmedCurve(TrimmedCurve value) {
        return new JAXBElement<TrimmedCurve>(_TrimmedCurve_QNAME, TrimmedCurve.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TemperatureDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "NormalOperatingTemperature")
    public JAXBElement<TemperatureDouble> createNormalOperatingTemperature(TemperatureDouble value) {
        return new JAXBElement<TemperatureDouble>(_NormalOperatingTemperature_QNAME, TemperatureDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link java.lang.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "MaterialDescription")
    public JAXBElement<java.lang.String> createMaterialDescription(java.lang.String value) {
        return new JAXBElement<java.lang.String>(_MaterialDescription_QNAME, java.lang.String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DistanceDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "InsideDiameter")
    public JAXBElement<DistanceDouble> createInsideDiameter(DistanceDouble value) {
        return new JAXBElement<DistanceDouble>(_InsideDiameter_QNAME, DistanceDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link BsplineCurve }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "BsplineCurve", substitutionHeadNamespace = "", substitutionHeadName = "Curve")
    public JAXBElement<BsplineCurve> createBsplineCurve(BsplineCurve value) {
        return new JAXBElement<BsplineCurve>(_BsplineCurve_QNAME, BsplineCurve.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Curve }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Curve")
    public JAXBElement<Curve> createCurve(Curve value) {
        return new JAXBElement<Curve>(_Curve_QNAME, Curve.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link com.basf.xpview.model.io.xmplant.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Rating")
    public JAXBElement<com.basf.xpview.model.io.xmplant.String> createRating(com.basf.xpview.model.io.xmplant.String value) {
        return new JAXBElement<com.basf.xpview.model.io.xmplant.String>(_Rating_QNAME, com.basf.xpview.model.io.xmplant.String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link com.basf.xpview.model.io.xmplant.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "WeldType")
    public JAXBElement<com.basf.xpview.model.io.xmplant.String> createWeldType(com.basf.xpview.model.io.xmplant.String value) {
        return new JAXBElement<com.basf.xpview.model.io.xmplant.String>(_WeldType_QNAME, com.basf.xpview.model.io.xmplant.String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DistanceDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "EndDiameter")
    public JAXBElement<DistanceDouble> createEndDiameter(DistanceDouble value) {
        return new JAXBElement<DistanceDouble>(_EndDiameter_QNAME, DistanceDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PressureDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "MaximumDesignPressure")
    public JAXBElement<PressureDouble> createMaximumDesignPressure(PressureDouble value) {
        return new JAXBElement<PressureDouble>(_MaximumDesignPressure_QNAME, PressureDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TemperatureDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "MinimumOperatingTemperature")
    public JAXBElement<TemperatureDouble> createMinimumOperatingTemperature(TemperatureDouble value) {
        return new JAXBElement<TemperatureDouble>(_MinimumOperatingTemperature_QNAME, TemperatureDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link CompositeCurve }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "CompositeCurve", substitutionHeadNamespace = "", substitutionHeadName = "Curve")
    public JAXBElement<CompositeCurve> createCompositeCurve(CompositeCurve value) {
        return new JAXBElement<CompositeCurve>(_CompositeCurve_QNAME, CompositeCurve.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TemperatureDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "MinimumAmbientTemperature")
    public JAXBElement<TemperatureDouble> createMinimumAmbientTemperature(TemperatureDouble value) {
        return new JAXBElement<TemperatureDouble>(_MinimumAmbientTemperature_QNAME, TemperatureDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link CurveBoundedSurface }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "CurveBoundedSurface", substitutionHeadNamespace = "", substitutionHeadName = "Surface")
    public JAXBElement<CurveBoundedSurface> createCurveBoundedSurface(CurveBoundedSurface value) {
        return new JAXBElement<CurveBoundedSurface>(_CurveBoundedSurface_QNAME, CurveBoundedSurface.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DistanceDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "BranchDiameter")
    public JAXBElement<DistanceDouble> createBranchDiameter(DistanceDouble value) {
        return new JAXBElement<DistanceDouble>(_BranchDiameter_QNAME, DistanceDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Association }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Association")
    public JAXBElement<Association> createAssociation(Association value) {
        return new JAXBElement<Association>(_Association_QNAME, Association.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link com.basf.xpview.model.io.xmplant.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Type")
    public JAXBElement<com.basf.xpview.model.io.xmplant.String> createType(com.basf.xpview.model.io.xmplant.String value) {
        return new JAXBElement<com.basf.xpview.model.io.xmplant.String>(_Type_QNAME, com.basf.xpview.model.io.xmplant.String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link java.lang.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Material")
    public JAXBElement<java.lang.String> createMaterial(java.lang.String value) {
        return new JAXBElement<java.lang.String>(_Material_QNAME, java.lang.String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Double }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "MaximumRelativeHumidity")
    public JAXBElement<Double> createMaximumRelativeHumidity(Double value) {
        return new JAXBElement<Double>(_MaximumRelativeHumidity_QNAME, Double.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link com.basf.xpview.model.io.xmplant.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "ConnectionType")
    public JAXBElement<com.basf.xpview.model.io.xmplant.String> createConnectionType(com.basf.xpview.model.io.xmplant.String value) {
        return new JAXBElement<com.basf.xpview.model.io.xmplant.String>(_ConnectionType_QNAME, com.basf.xpview.model.io.xmplant.String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DistanceDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Thickness")
    public JAXBElement<DistanceDouble> createThickness(DistanceDouble value) {
        return new JAXBElement<DistanceDouble>(_Thickness_QNAME, DistanceDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link java.lang.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Discipline")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    public JAXBElement<java.lang.String> createDiscipline(java.lang.String value) {
        return new JAXBElement<java.lang.String>(_Discipline_QNAME, java.lang.String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TemperatureDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "MinimumDesignTemperature")
    public JAXBElement<TemperatureDouble> createMinimumDesignTemperature(TemperatureDouble value) {
        return new JAXBElement<TemperatureDouble>(_MinimumDesignTemperature_QNAME, TemperatureDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DistanceDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "GasketGap")
    public JAXBElement<DistanceDouble> createGasketGap(DistanceDouble value) {
        return new JAXBElement<DistanceDouble>(_GasketGap_QNAME, DistanceDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link com.basf.xpview.model.io.xmplant.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Grade")
    public JAXBElement<com.basf.xpview.model.io.xmplant.String> createGrade(com.basf.xpview.model.io.xmplant.String value) {
        return new JAXBElement<com.basf.xpview.model.io.xmplant.String>(_Grade_QNAME, com.basf.xpview.model.io.xmplant.String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AngleDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "SweepAngle")
    public JAXBElement<AngleDouble> createSweepAngle(AngleDouble value) {
        return new JAXBElement<AngleDouble>(_SweepAngle_QNAME, AngleDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link com.basf.xpview.model.io.xmplant.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "FluidType")
    public JAXBElement<com.basf.xpview.model.io.xmplant.String> createFluidType(com.basf.xpview.model.io.xmplant.String value) {
        return new JAXBElement<com.basf.xpview.model.io.xmplant.String>(_FluidType_QNAME, com.basf.xpview.model.io.xmplant.String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AngleDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "StartAngle")
    public JAXBElement<AngleDouble> createStartAngle(AngleDouble value) {
        return new JAXBElement<AngleDouble>(_StartAngle_QNAME, AngleDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DistanceDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "LargeDiameter")
    public JAXBElement<DistanceDouble> createLargeDiameter(DistanceDouble value) {
        return new JAXBElement<DistanceDouble>(_LargeDiameter_QNAME, DistanceDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ellipse }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Ellipse", substitutionHeadNamespace = "", substitutionHeadName = "Curve")
    public JAXBElement<Ellipse> createEllipse(Ellipse value) {
        return new JAXBElement<Ellipse>(_Ellipse_QNAME, Ellipse.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PressureDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "MinimumDesignPressure")
    public JAXBElement<PressureDouble> createMinimumDesignPressure(PressureDouble value) {
        return new JAXBElement<PressureDouble>(_MinimumDesignPressure_QNAME, PressureDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DistanceString }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "WallThickness")
    public JAXBElement<DistanceString> createWallThickness(DistanceString value) {
        return new JAXBElement<DistanceString>(_WallThickness_QNAME, DistanceString.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TemperatureDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "MaximumDesignTemperature")
    public JAXBElement<TemperatureDouble> createMaximumDesignTemperature(TemperatureDouble value) {
        return new JAXBElement<TemperatureDouble>(_MaximumDesignTemperature_QNAME, TemperatureDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link java.lang.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Description")
    public JAXBElement<java.lang.String> createDescription(java.lang.String value) {
        return new JAXBElement<java.lang.String>(_Description_QNAME, java.lang.String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DistanceDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "StubDiameter")
    public JAXBElement<DistanceDouble> createStubDiameter(DistanceDouble value) {
        return new JAXBElement<DistanceDouble>(_StubDiameter_QNAME, DistanceDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AngleDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "BendAngle")
    public JAXBElement<AngleDouble> createBendAngle(AngleDouble value) {
        return new JAXBElement<AngleDouble>(_BendAngle_QNAME, AngleDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PlantItem }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "PlantItem")
    public JAXBElement<PlantItem> createPlantItem(PlantItem value) {
        return new JAXBElement<PlantItem>(_PlantItem_QNAME, PlantItem.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PersistentID }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "PersistentID")
    public JAXBElement<PersistentID> createPersistentID(PersistentID value) {
        return new JAXBElement<PersistentID>(_PersistentID_QNAME, PersistentID.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link CenterLine }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "CenterLine")
    public JAXBElement<CenterLine> createCenterLine(CenterLine value) {
        return new JAXBElement<CenterLine>(_CenterLine_QNAME, CenterLine.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link com.basf.xpview.model.io.xmplant.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Lining")
    public JAXBElement<com.basf.xpview.model.io.xmplant.String> createLining(com.basf.xpview.model.io.xmplant.String value) {
        return new JAXBElement<com.basf.xpview.model.io.xmplant.String>(_Lining_QNAME, com.basf.xpview.model.io.xmplant.String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PipingComponent }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "PipingComponent")
    public JAXBElement<PipingComponent> createPipingComponent(PipingComponent value) {
        return new JAXBElement<PipingComponent>(_PipingComponent_QNAME, PipingComponent.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Shape }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Shape", substitutionHeadNamespace = "", substitutionHeadName = "Curve")
    public JAXBElement<Shape> createShape(Shape value) {
        return new JAXBElement<Shape>(_Shape_QNAME, Shape.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PressureDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "NormalDesignPressure")
    public JAXBElement<PressureDouble> createNormalDesignPressure(PressureDouble value) {
        return new JAXBElement<PressureDouble>(_NormalDesignPressure_QNAME, PressureDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DistanceDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Radius")
    public JAXBElement<DistanceDouble> createRadius(DistanceDouble value) {
        return new JAXBElement<DistanceDouble>(_Radius_QNAME, DistanceDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link TemperatureDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "NormalDesignTemperature")
    public JAXBElement<TemperatureDouble> createNormalDesignTemperature(TemperatureDouble value) {
        return new JAXBElement<TemperatureDouble>(_NormalDesignTemperature_QNAME, TemperatureDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PressureDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "MaximumOperatingPressure")
    public JAXBElement<PressureDouble> createMaximumOperatingPressure(PressureDouble value) {
        return new JAXBElement<PressureDouble>(_MaximumOperatingPressure_QNAME, PressureDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link com.basf.xpview.model.io.xmplant.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Insulation")
    public JAXBElement<com.basf.xpview.model.io.xmplant.String> createInsulation(com.basf.xpview.model.io.xmplant.String value) {
        return new JAXBElement<com.basf.xpview.model.io.xmplant.String>(_Insulation_QNAME, com.basf.xpview.model.io.xmplant.String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DistanceDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Length")
    public JAXBElement<DistanceDouble> createLength(DistanceDouble value) {
        return new JAXBElement<DistanceDouble>(_Length_QNAME, DistanceDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link com.basf.xpview.model.io.xmplant.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Family")
    public JAXBElement<com.basf.xpview.model.io.xmplant.String> createFamily(com.basf.xpview.model.io.xmplant.String value) {
        return new JAXBElement<com.basf.xpview.model.io.xmplant.String>(_Family_QNAME, com.basf.xpview.model.io.xmplant.String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PressureDouble }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "MinimumOperatingPressure")
    public JAXBElement<PressureDouble> createMinimumOperatingPressure(PressureDouble value) {
        return new JAXBElement<PressureDouble>(_MinimumOperatingPressure_QNAME, PressureDouble.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Line }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Line", substitutionHeadNamespace = "", substitutionHeadName = "Curve")
    public JAXBElement<Line> createLine(Line value) {
        return new JAXBElement<Line>(_Line_QNAME, Line.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link JunctionBox }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "JunctionBox")
    public JAXBElement<JunctionBox> createJunctionBox(JunctionBox value) {
        return new JAXBElement<JunctionBox>(_JunctionBox_QNAME, JunctionBox.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link com.basf.xpview.model.io.xmplant.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "OperatorType")
    public JAXBElement<com.basf.xpview.model.io.xmplant.String> createOperatorType(com.basf.xpview.model.io.xmplant.String value) {
        return new JAXBElement<com.basf.xpview.model.io.xmplant.String>(_OperatorType_QNAME, com.basf.xpview.model.io.xmplant.String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link java.lang.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Manufacturer", scope = PlantItem.class)
    public JAXBElement<java.lang.String> createPlantItemManufacturer(java.lang.String value) {
        return new JAXBElement<java.lang.String>(_PlantItemManufacturer_QNAME, java.lang.String.class, PlantItem.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link java.lang.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Supplier", scope = PlantItem.class)
    public JAXBElement<java.lang.String> createPlantItemSupplier(java.lang.String value) {
        return new JAXBElement<java.lang.String>(_PlantItemSupplier_QNAME, java.lang.String.class, PlantItem.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link java.lang.String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "ModelNumber", scope = PlantItem.class)
    public JAXBElement<java.lang.String> createPlantItemModelNumber(java.lang.String value) {
        return new JAXBElement<java.lang.String>(_PlantItemModelNumber_QNAME, java.lang.String.class, PlantItem.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link KnotMultiplicities }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "KnotMultiplicitiesU", scope = BsplineSurface.class)
    public JAXBElement<KnotMultiplicities> createBsplineSurfaceKnotMultiplicitiesU(KnotMultiplicities value) {
        return new JAXBElement<KnotMultiplicities>(_BsplineSurfaceKnotMultiplicitiesU_QNAME, KnotMultiplicities.class, BsplineSurface.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link KnotMultiplicities }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "KnotMultiplicitiesV", scope = BsplineSurface.class)
    public JAXBElement<KnotMultiplicities> createBsplineSurfaceKnotMultiplicitiesV(KnotMultiplicities value) {
        return new JAXBElement<KnotMultiplicities>(_BsplineSurfaceKnotMultiplicitiesV_QNAME, KnotMultiplicities.class, BsplineSurface.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ControlPointArray }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "ControlPointArray", scope = BsplineSurface.class)
    public JAXBElement<ControlPointArray> createBsplineSurfaceControlPointArray(ControlPointArray value) {
        return new JAXBElement<ControlPointArray>(_BsplineSurfaceControlPointArray_QNAME, ControlPointArray.class, BsplineSurface.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Weights }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "Weights", scope = BsplineSurface.class)
    public JAXBElement<Weights> createBsplineSurfaceWeights(Weights value) {
        return new JAXBElement<Weights>(_BsplineSurfaceWeights_QNAME, Weights.class, BsplineSurface.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Knots }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "KnotsU", scope = BsplineSurface.class)
    public JAXBElement<Knots> createBsplineSurfaceKnotsU(Knots value) {
        return new JAXBElement<Knots>(_BsplineSurfaceKnotsU_QNAME, Knots.class, BsplineSurface.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Knots }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "KnotsV", scope = BsplineSurface.class)
    public JAXBElement<Knots> createBsplineSurfaceKnotsV(Knots value) {
        return new JAXBElement<Knots>(_BsplineSurfaceKnotsV_QNAME, Knots.class, BsplineSurface.class, value);
    }

}
